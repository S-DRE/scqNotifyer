// Loginx
exports.web_loginx = function(req,res) {

  // Recibe datos de peticion ajax del login tipo "callback" y crea la sesión y devuelve ok.
  // En la sesión ponemos las mismas propiedades de Telegram.
  session= req.session;
  session.cliente={};
  session.cliente.id=req.body.id;
  session.cliente.first_name=req.body.first_name;
  session.cliente.username=req.body.username;

  // nombre: {type: String, required: true, max: 50},
  // apellidos: {type: String, required: false, max: 100},
  // username: {type: String, required: false, max: 50, default: ''},
  // telegram_id: {type: String, required: true, max: 50},
  // solucionador: {type: Boolean, required: true, default: '0'},
  // notificaciones: {type: Boolean, required: true, default: '1'},
  // incidencias: incidenciaSchema

  // foto: {type: String, required: true, max: 120},
  //  latitud: {type: String, required: true, max: 20},
  //  longitud: {type: String, required: true, max: 20},
  //  texto_inc: {type: String, required: true, max: 254},
  //  resuelta: {type: Boolean, required: false, default: '0'},
  //  texto_res: {type: String, required: false, max: 255}

  if ('last_name' in req.body)
    session.cliente.last_name=req.body.last_name;
  else
    session.cliente.last_name='';

  session.cliente.auth_date=req.body.auth_date;


  // Ahora comprueba si usuario está dado de alta en la base de datos.Devuelve true o false.
  Usuario.exists( {telegram_id: req.body.id} ,function (err, encontrado)
  {
    if (err)
    {
      res.send({ status: "error", data: "No se puede procesar la entidad, datos incorrectos!" });
    }
    else
    {
      if (!encontrado) // No lo encontró entonces lo da de alta.
      {
        let usuario = new Usuario(
        {
          nombre: req.body.first_name,
          apellidos: session.cliente.last_name,
          username: req.body.username,
          telegram_id: req.body.id
        });

        // Programado con una promise.
        usuario.save().then(function()
        {
          if (err)
          {
            /* Si se ha producido un error, salimos de la función devolviendo  código http 422 (Unprocessable Entity).*/
            res.type('json').status(422).send({ status: "error", data: err });
          }
          else
            /* Enviamos al cliente la siguiente respuesta con el código HTTP 200. */
          res.type('json').status(200).send({ status: "ok", data: "Usuario logueado y registrado.!" });
        });
      }
      else
        res.type('json').status(200).send({ status: "ok", data: "Usuario logueado y registrado.!" });
    }
  })
}
